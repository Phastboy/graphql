// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "../docs"
}

generator markdown {
  provider = "prisma-markdown"
  output   = "../docs/ERD.md"
  title    = "QuickPost"
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output   = "../src/@generated"
  reExport = "All"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

/// Represents a social media post containing text and/or media attachments
/// @model
/// @collection posts
model Post {
  /// Unique identifier for the post (maps to MongoDB's native `_id` field)
  /// @field
  /// @id
  /// @default auto-generated ObjectId
  id String @id @default(auto()) @map("_id") @db.ObjectId

  /// Text content of the post (optional for media-only posts)
  /// @field
  /// @maxLength 2000
  textContent String?

  /// Array of media attachments (images/videos) associated with this post
  /// @field
  /// @relation
  media Media[]

  /// Timestamp when the post was created
  /// @field
  /// @default current timestamp
  createdAt DateTime @default(now())

  /// Timestamp when the post was last updated (automatically maintained)
  /// @field
  /// @updatedAt
  updatedAt DateTime @updatedAt

  /// Index for optimizing queries by creation date
  /// @index
  @@index([createdAt])
}

/// Represents a media attachment (image or video) for social media posts
/// @model
/// @collection media
model Media {
  /// Unique identifier for the media (maps to MongoDB's native `_id` field)
  /// @field
  /// @id
  /// @default auto-generated ObjectId
  id String @id @default(auto()) @map("_id") @db.ObjectId

  /// Public identifier from Cloudinary/media storage service
  /// @field
  /// @unique
  publicId String @unique

  /// Secure URL to access the media asset
  /// @field
  /// @url
  secureUrl String

  /// File format (e.g., "jpg", "png", "mp4")
  /// @field
  format String

  /// Width of the media in pixels (if applicable)
  /// @field
  width Int?

  /// Height of the media in pixels (if applicable)
  /// @field
  height Int?

  /// File size in bytes
  /// @field
  bytes Int

  /// Type of resource ("image" or "video")
  /// @field
  resourceType String

  /// Duration in seconds for video files
  /// @field
  duration Float?

  /// Streaming URL for video playback
  /// @field
  /// @url
  playbackUrl String?

  /// Eager transformations from Cloudinary (stored as JSON)
  /// @field
  eager Json?

  /// Timestamp when the media was uploaded
  /// @field
  /// @default current timestamp
  createdAt DateTime @default(now())

  /// Reference to the parent Post this media belongs to (optional)
  /// @field
  /// @relation
  postId String? @db.ObjectId

  /// Relationship to the parent Post model
  /// @relation
  post Post? @relation(fields: [postId], references: [id])

  /// Index for optimizing queries by resource type
  /// @index
  @@index([resourceType])
  /// Index for optimizing queries by creation date
  /// @index
  @@index([createdAt])
  /// Index for optimizing queries by parent post
  /// @index
  @@index([postId])
  /// Compound index for post-specific media queries by date
  /// @index
  @@index([postId, createdAt])
}
